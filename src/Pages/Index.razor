@page "/"
@using System.Text.RegularExpressions
@using System.Text.Json.Serialization
@inject HttpClient Http

<p>Paste a report url here from classic.warcraftlogs.com</p>
<RadzenTextBox Style="margin-bottom: 20px; width: 500px;" Placeholder="https://classic.warcraftlogs.com/reports/xyz" @oninput="@(async args => await Change(args.Value.ToString()))" />

@if (_reportId != null)
{
    if (_debuffEvents.Any())
    {
        <RadzenGrid Data="@_debuffEvents" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" AllowSorting="true" TItem="DebuffEvent" ColumnWidth="200px">
            <Columns>
                <RadzenGridColumn TItem="DebuffEvent" Property="Fight" Title="Fight" />
                <RadzenGridColumn TItem="DebuffEvent" Property="Time" Title="Time" />
                <RadzenGridColumn TItem="DebuffEvent" Property="AbilityOn" Title="Applied" />
                <RadzenGridColumn TItem="DebuffEvent" Property="AbilityOff" Title="Pushed off" />
                <RadzenGridColumn TItem="DebuffEvent" Property="Link" Title="Link">
                    <Template Context="debuffEvent">
                        <RadzenLink Path="@(debuffEvent?.Link)" Text="Log" target="_blank" />
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    }
    else
    {
        <RadzenProgressBar @bind-Value="@_progress" Style="margin-bottom: 20px" />
    }
}

@code
{
    private IEnumerable<DebuffEvent> _debuffEvents = new List<DebuffEvent>();
    private string _reportId;
    private double _progress = 0;

    public class DebuffEvent
    {
        public string Fight { get; set; }
        public TimeSpan Time { get; set; }
        public string AbilityOn { get; set; }
        public string AbilityOff { get; set; }
        public string Link { get; set; }
    }

    private async Task Change(string value)
    {
        _reportId = null;
        if (value.Contains("warcraftlogs.com"))
        {
            _debuffEvents = new List<DebuffEvent>();
            var matchResult = Regex.Match(value, @"^https?:\/\/classic\.warcraftlogs\.com\/reports\/(.*?)(#.*)?$");
            if (matchResult.Success && matchResult.Groups.Count > 1)
            {
                _reportId = matchResult.Groups[1].Value;
            }
        }
        else if (!string.IsNullOrWhiteSpace(value) && !value.Contains("/") && !value.Contains("http"))
        {
            _debuffEvents = new List<DebuffEvent>();
            _reportId = value;
        }

        if (!string.IsNullOrWhiteSpace(_reportId))
        {
            _debuffEvents = await GetDebuffPushOffsAsync(_reportId);
        }
    }

    private async Task<IEnumerable<DebuffEvent>> GetDebuffPushOffsAsync(string id)
    {
        _progress = 0;
        var result = new List<DebuffEvent>();
        var data = await Http.GetFromJsonAsync<FightData>("https://classic.warcraftlogs.com/v1/report/fights/" + id + "?api_key=09a3c521277a44c0d9a31f07503d3d09");
        for (var j = 0; j < data.Fights.Length; j++)
        {
            var fight = data.Fights[j];

            _progress = Math.Floor(100.0 * j / data.Fights.Length);

            if (fight.Boss == 0)
                continue;

            StateHasChanged();

            var eventData = await Http.GetFromJsonAsync<EventData>("https://classic.warcraftlogs.com/v1/report/events/debuffs/" + id + "?hostility=1&start=" + fight.StartTime + "&end=" + fight.EndTime + "&api_key=09a3c521277a44c0d9a31f07503d3d09");
            var events = eventData.Events;
            for (var i = 0; i < events.Length - 3; i++)
            {
                if (events[i].Timestamp != events[i + 1].Timestamp &&
                    events[i + 1].Timestamp == events[i + 2].Timestamp &&
                    events[i + 2].Timestamp != events[i + 3].Timestamp &&
                    events[i + 1].TargetId == events[i + 2].TargetId &&
                    events[i + 1].Type == "removedebuff" &&
                    events[i + 2].Type == "applydebuff" &&
                    events[i + 1].Ability.Guid != events[i + 2].Ability.Guid)
                {
                    var timestamp = TimeSpan.FromMilliseconds(events[i + 1].Timestamp) - TimeSpan.FromMilliseconds(fight.StartTime);
                    var link = "https://classic.warcraftlogs.com/reports/" + id + "#fight=" + fight.Id + "&type=auras&spells=debuffs&hostility=1&source=" + events[i + 1].TargetId + "&view=events&start=" + (events[i + 1].Timestamp - 5000) + "&end=" + events[i + 1].Timestamp;
                    result.Add(new DebuffEvent
                    {
                        Fight = fight.Name,
                        Time = timestamp,
                        Link = link,
                        AbilityOn = events[i + 2].Ability.Name,
                        AbilityOff = events[i + 1].Ability.Name
                    });
                }
            }
        }

        _progress = 100;
        return result;
    }

    public class FightData
    {
        public Fight[] Fights { get; set; }
    }

    public class Fight
    {
        public int Id { get; set; }

        public int Boss { get; set; }

        [JsonPropertyName("start_time")]
        public int StartTime { get; set; }

        [JsonPropertyName("end_time")]
        public int EndTime { get; set; }

        public string Name { get; set; }
    }

    public class EventData
    {
        public Event[] Events { get; set; }
    }

    public class Event
    {
        public int Timestamp { get; set; }

        public string Type { get; set; }

        public int TargetId { get; set; }

        public Ability Ability { get; set; }
    }

    public class Ability
    {
        public int Guid { get; set; }

        public string Name { get; set; }
    }
}
